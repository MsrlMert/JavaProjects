/**
 * This program finds peak points from an array and if exits prints value(s)
 * @author Furkan Mert Mısırlı ID : 041904008
 * @since 06.03.2021
 */


public class FurkanMertMısırlı {
    public static void main(String[] args){
        int[] inputArray1 =  {};
        int[] inputArray2 = {100000,98010,96040,94090,92160,90250,88360,86490,84640,82810,81000,79210,77440,75690,73960,72250,70560,68890,67240,65610,64000,62410,60840,59290,57760,56250,54760,53290,51840,50410,49000,47610,46240,44890,43560,42250,40960,39690,38440,37210,36000,34810,33640,32490,31360,30250,29160,28090,27040,26010,25000,24010,23040,22090,21160,20250,19360,18490,17640,16810,16000,15210,14440,13690,12960,12250,11560,10890,10240,9610,9000,8410,7840,7290,6760,6250,5760,5290,4840,4410,4000,3610,3240,2890,2560,2250,1960,1690,1440,1210,1000,810,640,490,360,250,160,90,40,10,0,10,40,90,160,250,360,490,640,810,1000,1210,1440,1690,1960,2250,2560,2890,3240,3610,4000,4410,4840,5290,5760,6250,6760,7290,7840,8410,9000,9610,10240,10890,11560,12250,12960,13690,14440,15210,16000,16810,17640,18490,19360,20250,21160,22090,23040,24010,25000,26010,27040,28090,29160,30250,31360,32490,33640,34810,36000,37210,38440,39690,40960,42250,43560,44890,46240,47610,49000,50410,51840,53290,54760,56250,57760,59290,60840,62410,64000,65610,67240,68890,70560,72250,73960,75690,77440,79210,81000,82810,84640,86490,88360,90250,92160,94090,96040,98010,100000,102010,104040,106090,108160,110250,112360,114490,116640,118810,121000,123210,125440,127690,129960,132250,134560,136890,139240,141610,144000};
        int[] inputArray3 = {0,100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,2500,2600,2700,2800,2900,3000,3100,3200,3300,3400,3500,3600,3700,3800,3900,4000,4100,4200,4300,4400,4500,4600,4700,4800,4900,5000,5100,5200,5300,5400,5500,5600,5700,5800,5900,6000,6100,6200,6300,6400,6500,6600,6700,6800,6900,7000,7100,7200,7300,7400,7500,7600,7700,7800,7900,8000,8100,8200,8300,8400,8500,8600,8700,8800,8900,9000,9100,9200,9300,9400,9500,9600,9700,9800,9900,10000,10100,10200,10300,10400,10500,10600,10700,10800,10900,11000,11100,11200,11300,11400,11500,11600,11700,11800,11900,12000,12100,12200,12300,12400,12500,12600,12700,12800,12900,13000,13100,13200,13300,13400,13500,13600,13700,13800,13900,14000,14100,14200,14300,14400,14500,14600,14700,14800,14900,15000,15100,15200,15300,15400,15500,15600,15700,15800,15900,16000,16100,16200,16300,16400,16500,16600,16700,16800,16900,17000,17100,17200,17300,17400,17500,17600,17700,17800,17900,18000,18100,18200,18300,18400,18500,18600,18700,18800,18900,19000,19100,19200,19300,19400,19500,19600,19700,19800,19900,20000,20100,20200,20300,20400,20500,20600,20700,20800,20900,21000,21100,21200,21300,21400,21500,21600,21700,21800,21900,22000};
        int[] inputArray4 = {0,2000,3999,5996,7991,9983,11971,13954,15932,17903,19867,21823,23770,25708,27636,29552,31457,33349,35227,37092,38942,40776,42594,44395,46178,47943,49688,51414,53119,54802,56464,58104,59720,61312,62879,64422,65938,67429,68892,70328,71736,73115,74464,75784,77074,78333,79560,80756,81919,83050,84147,85211,86240,87236,88196,89121,90010,90863,91680,92461,93204,93910,94578,95209,95802,96356,96872,97348,97786,98185,98545,98865,99146,99387,99588,99749,99871,99953,99994,99996,99957,99879,99761,99602,99404,99166,98889,98572,98215,97820,97385,96911,96398,95847,95258,94630,93965,93262,92521,91744,90930,90079,89193,88271,87313,86321,85294,84233,83138,82010,80850,79657,78432,77175,75888,74571,73223,71846,70441,69007,67546,66058,64543,63003,61437,59847,58233,56596,54936,53253,51550,49826,48082,46319,44537,42738,40921,39088,37240,35376,33499,31608,29704,27789,25862,23925,21978,20023,18060,16089,14112,12129,10142,8150,6155,4158,2159,159,-1841,-3840,-5837,-7833,-9825,-11813,-13797,-15775,-17746,-19711,-21668,-23616,-25554,-27482,-29400,-31305,-33199,-35078,-36944,-38795,-40631,-42450,-44252,-46037,-47803,-49550,-51277,-52984,-54669,-56333,-57974,-59592,-61186,-62755,-64300,-65819,-67311,-68777,-70215,-71625,-73006,-74358,-75680,-76972,-78234,-79464,-80662,-81828,-82961,-84061,-85127,-86160,-87158,-88121,-89048,-89941,-90797,-91617,-92400,-93146,-93855,-94527,-95160,-95756,-96313,-96832,-97312,-97753,-98155,-98518,-98841,-99125,-99369};


        int[] peakList = findPeaks(inputArray1);

        if(peakList != null){
            for(int i=0; i<peakList.length; i++){
                System.out.println(peakList[i]);
            }
        }
    }

    /**
     * Method finds the peak points in inputArray and returns peak points as int array
     * @param inputArray
     * @return peakPoints
     */
    public static int[] findPeaks(int[] inputArray){
        int countPeaks = 0; // it defined for finding the number of peak points in inputArray

        for(int i=1; i<inputArray.length-1;i++){
            // if point obey the rule countPeaks is increased
            if(inputArray[i]>inputArray[i-1] && inputArray[i]>inputArray[i+1]){
                countPeaks ++;
            }
        }

        int[] peakPoints = new int[countPeaks] ; // peak points list defined with using countPeaks

        // if there is no peak points in inputArray means to peakPoints list will be null
        if(countPeaks == 0){
            System.out.println("There are no peak points.");
            return null;
        }

        int peakPointsIndex = 0; // It defined for the index value required to add an element to the peakPoints list

        // if countPeaks is not equal to 0
        for(int i=1; i<inputArray.length -1 ;i++){
            // if point in inputArray satisfies the rule, point is add to peakPoints list
            if(inputArray[i] > inputArray[i-1] && inputArray[i] > inputArray[i+1]){
                peakPoints[peakPointsIndex] = inputArray[i];
                peakPointsIndex++; // After adding an element to the list, the index is incremented by 1
            }
        }

        // If there is only one element, the output sentence will change
        if(peakPoints.length == 1){
            System.out.println("There is 1 peak point.");
            System.out.println("Peak value (y coordinate) is:");

        }
        else {
            System.out.println("There are " + peakPoints.length + " peak points.");
            System.out.println("Peak values (y coordinates) are:");
        }

        return peakPoints;

    }
}
